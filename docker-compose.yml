version: '3.8'

# Servislerimizi (uygulamalarımızı) burada tanımlıyoruz.
services:
  # RabbitMQ Mesaj Kuyruğu Servisi
  # Servislerin birbiriyle haberleşmesini sağlayacak postacı.
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rentacar-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"     # Uygulamaların bağlanacağı port
      - "15672:15672"   # Yönetim arayüzü (tarayıcıdan görmek için)
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER} # .env dosyasından alınacak
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS} # .env dosyasından alınacak
    networks:
      - rentacar-network

  # Auth Servisi (Kullanıcı İşlemleri)
  # Kayıt, giriş gibi işlemleri yönetecek mikroservisimiz.
  auth-service:
    build:
      context: . # Dockerfile'ın bulunduğu klasör
      dockerfile: ./services/auth-service/Dockerfile
    container_name: rentacar-auth-service
    restart: unless-stopped
    ports:
      - "5001:5001" # Lokal port 5001'i container'ın 5001 portuna yönlendir
    environment:
      # Ortam değişkenleri ana .env dosyasından alınacak
      MONGODB_URI: ${MONGODB_URI}
      PORT: 5001
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      RABBITMQ_URI: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
    depends_on:
      - rabbitmq # auth-service'in başlamadan önce rabbitmq'nun başlamasını bekle
    networks:
      - rentacar-network
    volumes:
      # Kodda yaptığımız değişikliklerin anında container'a yansıması için (geliştirme ortamı için)
      - ./services/auth-service:/app
      - ./shared-utils:/app/shared-utils
      # Bu satır, container içindeki node_modules'ın üzerine yazılmasını engeller
      - /app/node_modules

# Servislerin birbiriyle iletişim kurmasını sağlayan sanal ağ
networks:
  rentacar-network:
    driver: bridge